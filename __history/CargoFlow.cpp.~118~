//---------------------------------------------------------------------------

#pragma hdrstop

#include "CargoFlow.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#include <fstream>

failsSave Save_Cities(tddMatr CargoFlow, tdStrs CityNames,  AnsiString FileName)
 {
 if(FileName.Length() == 0) return EmptyNameS;
 ofstream File;
 int length;
 File.open(FileName.c_str(), ios::binary | ios::trunc);//открытие файла на запись с очисткой
 if(File.fail()) return FileFailS;

 if(CargoFlow.Length == 0 && CityNames.Length == 0)// Сохранение пустой таблицы
 {
 File.close();
 return GoodS;
 }

 length = CityNames.Length;

 //записываем длину массива Названия Городов
 File.write((char*)&length, sizeof(length));

 if(CityNames.Length > 0)
 {
 /*Циклически записываем массив Названия Городов в виде:
	длина строки - строка(Назвыание Города)*/
    for(int i=0; i<CityNames.Length; i++)
	{
	  length = CityNames[i].Length();
	  File.write((char*)&length, sizeof(length));
	  if(CityNames[i].Length() > 0)
		 File.write((char*) &CityNames[i], sizeof(wchar_t)* length);
	}
 }

 if(CargoFlow.Length)
 {
	/*Циклически записываем матрицу(построчно) грузопотоков
	между Городами(без расчетов) */
   for(int i=0; i<CargoFlow.Length; i++)
	File.write((char*)&CargoFlow[i][0], sizeof(MatrType) * CargoFlow[i].Length);
 }

  File.close();
  return GoodS;
 }


failsOpen Load_Cities(tddMatr& CargoFlow, tdStrs& CityNames,
                                                        AnsiString FileName)
{
 ifstream File;
 if(!FileName.Length()) return EmptyNameO;

 File.open(FileName.c_str(), ios::binary); //открытие файла на чтение
 if(File.fail()) return FileFailO;

 File.seekg(0, ios::end);
 File.clear();

 int size = File.tellg();
 if(size == 4) return EmptyTableO;
 File.seekg(0);

 int length; //переменная для хранения длинн
 File.read((char*)&length, sizeof(length));//считывание длинны массива строк

 if(length > 0/*длиннa массива строк*/)
	{
	   try
	   {
		CityNames.set_length(length);
	   }
	   catch(...)
	   {
		File.close();
		return MemoryFailO;
	   }
	   for(int i=0; i<CityNames.Length; i++)
	   {
		 File.read((char*)&length, sizeof(length));//считывание длины строки

		 if(length > 0)
		   {
			 //выделение памяти под строку Название Города
			try
			{
			CityNames[i].SetLength(length); /*установка длины строки Название Города*/
			}
			catch(...)
			{
			CityNames.set_length(0); //удаление массива строк Названия Городов
			File.close(); //закрытие файла
			return MemoryFailO;
			}
			//считывание в созданную строку строку из файла
			File.read((char*)&CityNames[i], sizeof(wchar_t) * length);
		   }
		 else CityNames[i] = "";
	   }
	}

   //*******************************************************************
   File.clear();//на случай, если после массива строк в файле ничего не записано
   size = File.tellg(); //позиция после считывания массива строк
   File.seekg(0, ios::end);
   File.clear();

   if(size != File.tellg())//Если после массива строк ничего нет, то это условие
   //не выполнится
   {
     //вычисление Размера матрицы
	 size = sqrt((float)(abs(size - File.tellg())/sizeof(MatrType)));
	 //выделение памяти под матрицу
	 try{
		CargoFlow.set_length(size);
		for(int i = 0; i < size; i++)
		CargoFlow[i].set_length(size);
	 }
	 catch(...)
	 {
	   CargoFlow.set_length(0);/*если матрица Грузопоток
	   была заполнена, очищаем ее*/
	   CityNames.set_length(0);//удаление массива строк Названия Городов
	   File.close(); //закрытие файла
	   return MemoryFailO;
	 }
	 //Циклично считываем в созданную матрицу данные из файла
	 for(int i=0; i<CityNames.Length; i++)
		 File.read((char*)&CargoFlow[i][0], sizeof(MatrType)
		                                           * CargoFlow[i].Length);
   }
   File.close();//закрываем файл
   return GoodO; //говорим, что все хорошо
 }

float ExportCrg2City(tddMatr CargoFlow, int RowIndex)
{
 RowIndex--;
 if(CargoFlow.Length==0 || RowIndex < 0 || RowIndex >= CargoFlow.Length) return -1;
 float sum = 0;
 for (int i = 0; i < CargoFlow[0].Length; i++)
	   sum += CargoFlow[RowIndex][i];
 return sum;
}

float ImportCrg2City(tddMatr CargoFlow, int ColIndex)
{
 ColIndex--;
 if(CargoFlow.Length==0 || ColIndex < 0 || ColIndex >= CargoFlow.Length) return -1;
 float sum = 0;
 for (int i = 0; i < CargoFlow.Length; i++)
	   sum += CargoFlow[i][ColIndex];
 return sum;
}

float CalcP(tddMatr CargoFlow)
{
  if(CargoFlow.Length==0) return -1;
  float P;
  for (int i = 0; i < CargoFlow.Length; i++)
	 for (int j = 0; j < CargoFlow[0].Length; j++)
		  P += CargoFlow[i][j];
  return  P;
}

float ImportCrgFlWeidht(tddMatr CargoFlow, int ColIndex, float P)
//ввозимые грузы для города считаем по столбцу
{
  ColIndex--;
  if(CargoFlow.Length==0 || ColIndex < 0 || ColIndex >= CargoFlow.Length
														  || P < 0) return -1;
  float CalcRes = 0;
  if(P == -1) P = CalcP(CargoFlow);
  for (int i = 0; i < CargoFlow.Length; i++)
	  if(i != /*на самом деле RowIndex, который ==*/ColIndex)
		   CalcRes += CargoFlow[i][ColIndex];

  return  (float)(1 / P * CalcRes);
}

float ExportCrgFlWeight(tddMatr CargoFlow, int RowIndex, float P)
{
  RowIndex--;
  if(CargoFlow.Length==0 || RowIndex < 0 || RowIndex >= CargoFlow.Length
														  || P < 0) return -1;
  float CalcRes = 0;
  if(P == -1) P = CalcP(CargoFlow);
  for (int i = 0; i < CargoFlow[0].Length; i++)
	  if(i != /*на самом деле ColIndex, который ==*/RowIndex)
		   CalcRes += CargoFlow[RowIndex][i];
  return (float)(1 / P * CalcRes);
}
